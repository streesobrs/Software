# .NET Desktop Build & Upload to GitHub Releases（修复YAML语法）
name: .NET Desktop Build & Permanent Save

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [ "Any CPU" ]  # 支持带空格的平台名

    runs-on: windows-latest

    env:
      Solution_Name: Software.sln
      Main_Project_Name: YourMainProject  # 替换实际项目名
      Main_Project_Path: YourMainProject\YourMainProject.csproj  # 替换实际路径
      Output_Directory: ${{ github.workspace }}\output\${{ matrix.configuration }}\${{ matrix.platform }}
      Zip_Output_Dir: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # 还原依赖（修复语法：反引号后无空格/注释）
      - name: Restore NuGet packages
        run: msbuild $env:Solution_Name /t:Restore `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform="${{ matrix.platform }}"

      # 构建主项目（关键修复：移除反引号后的注释，确保语法正确）
      - name: Build main project
        run: msbuild $env:Main_Project_Path `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform="${{ matrix.platform }}" `
          /p:OutputPath="$env:Output_Directory" `
          /p:DeployOnBuild=true
        # 注意：注释不能跟在反引号后面，必须单独成行

      - name: Create ZIP package
        run: |
          $version = "${{ github.ref_name }}"
          $zipFileName = "${{ env.Main_Project_Name }}-$version-${{ matrix.platform }}.zip"
          $zipFileName = $zipFileName -replace ' ', '_'  # 替换空格为下划线
          $zipFilePath = Join-Path -Path "${{ env.Zip_Output_Dir }}" -ChildPath $zipFileName

          if (Test-Path "${{ env.Output_Directory }}") {
            Compress-Archive -Path "${{ env.Output_Directory }}\*" -DestinationPath $zipFilePath -Force
            echo "ZIP_FILE_PATH=$zipFilePath" >> $env:GITHUB_ENV
            echo "ZIP_FILE_NAME=$zipFileName" >> $env:GITHUB_ENV
            Write-Host "✅ 生成ZIP包：$zipFilePath"
          } else {
            Write-Error "❌ 输出目录不存在：${{ env.Output_Directory }}"
            exit 1
          }

      - name: Upload to GitHub Releases
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: >-
            ${{ 
              github.event.release.upload_url || 
              format('https://uploads.github.com/{0}/releases/{1}/assets', 
                github.repository, 
                github.ref_name) 
            }}
          asset_path: ${{ env.ZIP_FILE_PATH }}
          asset_name: ${{ env.ZIP_FILE_NAME }}
          asset_content_type: application/zip
