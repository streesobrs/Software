# .NET Desktop Build & Upload to GitHub Releases（永久保留）
name: .NET Desktop Build & Permanent Save

on:
  # 合并：同时支持“main分支代码推送”和“TAG推送”（用push事件统一处理）
  push:
    branches: [ "main" ]  # 代码推送到main分支时触发（临时测试）
    tags: [ "v*" ]        # 推送v1.0.0这类TAG时触发（永久保存）
  # 手动发布Release时触发（永久保存）
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]  # 只构建Release版本
        platform: [x64]  # 按需调整为x86/AnyCPU

    runs-on: windows-latest

    env:
      # 基础环境变量（无交叉引用）
      Solution_Name: Software.sln
      Main_Project_Name: YourMainProject  # 替换为主项目名称（如MyWpfApp）
      Main_Project_Path: YourMainProject\YourMainProject.csproj  # 替换为主项目路径
      Output_Directory: ${{ github.workspace }}\output\${{ matrix.configuration }}\${{ matrix.platform }}
      Zip_Output_Dir: ${{ github.workspace }}  # ZIP包输出根目录

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # 还原NuGet依赖
      - name: Restore NuGet packages
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}

      # 构建主项目
      - name: Build main project
        run: msbuild $env:Main_Project_Path `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=${{ matrix.platform }} `
          /p:OutputPath=$env:Output_Directory `
          /p:DeployOnBuild=true

      # 动态生成ZIP包（解决env交叉引用问题）
      - name: Create ZIP package
        run: |
          # 拼接ZIP文件名：项目名-版本号-平台.zip
          $version = "${{ github.ref_name }}"  # 自动获取TAG名或分支名
          $zipFileName = "${{ env.Main_Project_Name }}-$version-${{ matrix.platform }}.zip"
          $zipFilePath = Join-Path -Path "${{ env.Zip_Output_Dir }}" -ChildPath $zipFileName

          # 压缩并保存路径到全局变量
          if (Test-Path "${{ env.Output_Directory }}") {
            Compress-Archive -Path "${{ env.Output_Directory }}\*" -DestinationPath $zipFilePath -Force
            echo "ZIP_FILE_PATH=$zipFilePath" >> $env:GITHUB_ENV
            echo "ZIP_FILE_NAME=$zipFileName" >> $env:GITHUB_ENV
            Write-Host "✅ 生成ZIP包：$zipFilePath"
          } else {
            Write-Error "❌ 输出目录不存在：${{ env.Output_Directory }}"
            exit 1
          }

      # 上传到Releases（仅TAG推送或Release发布时执行）
      - name: Upload to GitHub Releases（永久保存）
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: >-
            ${{ 
              github.event.release.upload_url || 
              format('https://uploads.github.com/{0}/releases/{1}/assets', 
                github.repository, 
                github.ref_name) 
            }}
          asset_path: ${{ env.ZIP_FILE_PATH }}
          asset_name: ${{ env.ZIP_FILE_NAME }}
          asset_content_type: application/zip
