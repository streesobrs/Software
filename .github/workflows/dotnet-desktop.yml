# .NET Desktop Build & Upload to GitHub Releases（永久保留）
name: .NET Desktop Build & Permanent Save

on:
  # 1. 推送代码时触发构建（临时保留产物，用于测试）
  push:
    branches: [ "main" ]
  # 2. 手动发布Release时触发（永久保存产物）
  release:
    types: [published]
  # 3. 推送TAG时自动触发（可选，无需手动创建Release）
  tag_push:
    tags: [ "v*" ]  # 匹配 v1.0.0、v2.1.0 这类版本号TAG

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]  # 只构建Release版本（永久保存无需Debug）
        platform: [x64]  # 按需调整为 x86/AnyCPU

    runs-on: windows-latest

    env:
      # 基础环境变量（不交叉引用，避免语法错误）
      Solution_Name: Software.sln
      Main_Project_Name: YourMainProject  # 替换为主项目名称（如 MyWpfApp）
      Main_Project_Path: YourMainProject\YourMainProject.csproj  # 替换为主项目路径
      Output_Directory: ${{ github.workspace }}\output\${{ matrix.configuration }}\${{ matrix.platform }}
      # ZIP包输出路径（文件名后续在步骤中动态生成）
      Zip_Output_Dir: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # 还原NuGet依赖
      - name: Restore NuGet packages
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}

      # 构建主项目（生成exe和依赖）
      - name: Build main project
        run: msbuild $env:Main_Project_Path `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=${{ matrix.platform }} `
          /p:OutputPath=$env:Output_Directory `
          /p:DeployOnBuild=true

      # 动态生成ZIP文件名（解决env内部引用错误）
      - name: Create ZIP package (with dynamic name)
        run: |
          # 1. 拼接ZIP文件名：项目名-版本号-平台.zip（版本号从TAG或Release中获取）
          $version = "${{ github.ref_name }}"  # 自动获取TAG名（如v1.0.0）或Release名
          $zipFileName = "${{ env.Main_Project_Name }}-$version-${{ matrix.platform }}.zip"
          $zipFilePath = Join-Path -Path "${{ env.Zip_Output_Dir }}" -ChildPath $zipFileName

          # 2. 检查输出目录并压缩
          if (Test-Path "${{ env.Output_Directory }}") {
            Compress-Archive -Path "${{ env.Output_Directory }}\*" -DestinationPath $zipFilePath -Force
            Write-Host "✅ ZIP包生成成功：$zipFilePath"
            # 3. 将ZIP路径存入环境变量，供后续上传步骤使用
            echo "ZIP_FILE_PATH=$zipFilePath" >> $env:GITHUB_ENV
            echo "ZIP_FILE_NAME=$zipFileName" >> $env:GITHUB_ENV
          } else {
            Write-Error "❌ 输出目录不存在：${{ env.Output_Directory }}"
            exit 1
          }

      # 核心：上传到GitHub Releases（永久保存，仅在Release或TAG触发时执行）
      - name: Upload ZIP to GitHub Releases (Permanent Save)
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1  # 稳定的Release上传Action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动生成，无需手动配置
        with:
          # 处理两种触发场景的上传地址：
          upload_url: >-
            ${{ 
              github.event.release.upload_url || 
              format('https://uploads.github.com/{0}/releases/{1}/assets', 
                github.repository, 
                github.ref_name) 
            }}
          asset_path: ${{ env.ZIP_FILE_PATH }}  # 从前面步骤获取的ZIP路径
          asset_name: ${{ env.ZIP_FILE_NAME }}  # 从前面步骤获取的ZIP文件名
          asset_content_type: application/zip  # 固定为ZIP文件类型
